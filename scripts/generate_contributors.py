#!/usr/bin/env python3
# Run this script:
# $ ./scripts/generate_contributors.py CONTRIBUTORS.toml book-src/CONTRIBUTORS.md

import subprocess
import argparse
import os
import sys
from utils import github_page_for_contributor
from utils.contributors import parse_contributors_file, sorted_authors_from_raw_shortlog_lines


template = """
<!--
This file is automatically generated. To add yourself or to change
your information, you need to change {CONTRIBUTORS_FILE}
-->
## Contributors

We are grateful to the following people for their contributions to
the library.

{names}

If you contributed to the library and don't see yourself on this list,
read the instructions on
[adding yourself as a contributor](CONTRIBUTING.md#add-contributor).

Help us to improve the library by contributing to the project!
Contributions come in many forms, please ask us if you are not sure
how to help. We are happy to help you get started.
"""


def format_contributor(contributor):
    display_name = contributor['displayName']
    github_page = github_page_for_contributor(contributor)
    if github_page:
        return f'- [{display_name}]({github_page})'
    return f'- {display_name}'


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Generate contributors markdown content. Usage: generate_contributors.py <CONTRIBUTORS_FILE> <OUTPUT_FILE>')
    parser.add_argument('contributors_file', help='Path to the CONTRIBUTORS.toml file.')
    parser.add_argument('output_file', help='Output file path to write the generated contributors markdown content to.')
    args = parser.parse_args()

    contributors_data = parse_contributors_file(args.contributors_file)

    git_log_output = subprocess.run([
        'git', 'shortlog',
        '-ns',
        '--invert-grep', '--grep=^chore:',
        '--group=author', '--group=trailer:co-authored-by',
        'HEAD'
    ], capture_output=True, text=True, check=True).stdout.splitlines()

    sorted_authors = sorted_authors_from_raw_shortlog_lines(
        git_log_output, contributors_data, args.contributors_file)
    output = template.format(
        names='\n'.join((format_contributor(c) for c in sorted_authors)),
        CONTRIBUTORS_FILE=args.contributors_file
    )

    out_path = args.output_file
    if os.path.isdir(out_path):
        print(f'Error: {out_path!r} is a directory; please provide a path including the filename.', file=sys.stderr)
        sys.exit(2)
    parent = os.path.dirname(out_path)
    if parent:
        os.makedirs(parent, exist_ok=True)
    with open(out_path, 'w') as output_file:
        output_file.write(output)
    print(f'Wrote contributors markdown content to {out_path}.')
